Jen Simmons-Linked In CSS notes


Headlines
    <h1></h1>    <h2></h2>    <h3></h3>    <h4></h4>    <h5></h5>    <h6></h6>

Bold / Italic               (all are inline)
    <i></i>                 Visual italic font
    <em></em>               Emphasis read by a screen reader
    <b></b>                 Visual bold font
    <strong></strong>       Importance read by a screen reader

Lists
    <ul>
        <li></li>           Will be marked with a dot
    </ul>

    <ol>
        <li></li>           Will be marked with a number
    </ol>

    <dl>                'Definition List' 
        <dt>            'Definition Term'
        <dd></dd>       'Definition Description'
        </dt>
    </dl>

Quotes
    <blockquote>                    creates a block 
        <p> What was said </p>
        <cite> Who said it <cite>
    </blockquote>

    <q></q>     Inline quotes. Broswers picks the quote marks based on the language.

Dates & Times
    <time> Can write a date however you want. This is what we see. </time>

    <time datetime="YYYY-MM-DD"> </time>
        Machine readable attribute to be included with <time>

    <time datetime="17:30"> Time of day written in military time </time>

    Other time formats 
        datetime="14:15:28.5"       hh-mm-ss.ddd
        datetime="15:45-05:00"      hh-mm-ss.ddd(+ || -)hh:mm hour diff from GMT

Code 
    <code> </code>      (inline) shows symantic code

HTML Character Entities  (full list can be found on W3C website)
    - Used when you want an &, <, or > to show up on the screen

    &copy = 'copyright symbol'
    &trade = 'trademark symbol'
    &star = 'star symbol'
    &nbsp = 'non-breaking space' - browser will know to never break the line there when wrapping
    &lt = '<'          
    &gt = '>'

    <br>                    Markes a line break. No closing tag needed
    <pre></pre>             Makes the browser pay attention to line breaks and spacing.

                        <pre>
                            <code>
                                &lt; ul &gt;
                                    &lt; li &gt; item1 &lt; li &gt;
                                    &lt; li &gt; item2 &lt; li &gt;
                                &lt; /ul &gt;

                                ul {
                                    color: teal;
                                }
                                li {
                                    list-style-type: square;
                                }
                            </code>
                        </pre>

Subscripts (like in chemistry)
    <p>H<sub>2</sub>0</p>           // H2O

Superscripts (like math)
    <p>x<sup>^y</sup></p>           // x^y

    Math ML is a more powerful language for writing math equations

Subtext (for fine print like copyright info)
    <small></small>     To convey something with little importance, like a footer

Class
    class=''        .clase-name

ID 
    id=''           #id-name

Language
    lang=''

Text Flow Direction
    dir='ltr'       left to right
    dir='rtl'       right to left 

ARIA Roles
    - IT IS MORE IMPORTANT TO USE SYMANTIC HTML THAN ARIA ROLES. ARIA roles are for when symantic HTML can't do the job.
    - HTML attributes that provide accessible information about that specific element
    aria-label='how you want something read by a screen reader'
    aria-hidden='true'  // removes something from the accessibility tree so a sreen reader skips it. Put the element you want to hide in a <div aria-hidden='true'> to hide it.

Links
    <a href='url of where to go'>Words that will contain the hyperlink</a>

    <p> This is a sentence <a href=''>with a link</a> in the middle.</p>

    <p><a href=''><img src=''></a></p>      // img link

    - Absolute urls link to a specific place on the web. They require the full https://www.url.com 
    - Relative urls link files used by the local webpage = /about or /images
        - file names have endings such as .html .jpg or .css 
    * You can put files such as your web-resume.html in a folder, rename the file index.html and then use the URL https://www.luthercalvinriggs.com/web-resume/ as the link and the system will auto load the index.html for the web-resume folder.

Navigaion Menu or Bar
    <nav role='navigation' aria-label='main menu'>
        <ul class='navbar'>
            <li><a href='/'>Home</a></li>
            <li><a href='/people'>People</a></li>
            <li><a href='/prices'>Prices</a></li>
            <li><a href='/contact'>Contact</a></li>
        </ul>
    </nav>

    <footer>
        <a href=''></a>
        <a href=''></a>
    </footer>

Images  
    <img src='image-to-load' alt='text-when-not-seen' width='' height=''>

    File formats  - goal is high quality with low file size
        GIF - 256 colors, good at compressing large areas of a single color 
        SVG - logo, icons, etc - vector file  VERY SMALL FILE: should use if you can 
        JPG - compressing photos -> don't put a large pixel size jpg on your sight, it will slow down
        PNG - good for transparency. good at compression. 
    Try various options to see which compresses to the smallest size and still looks good

Responsive Images
    Responsive resolutions - pixel density
        Can create different images and let the browser choose
        Put multiple images in your HTML with different width/height 
        Use a srcset='' - lists the images offered to the browser as choices (comma separated). The browser will swap out images based on resolution.
           
            <img src='image-to-load' alt='text-when-not-seen' width='' height=''
            
            srcset='img-url/width-size.jpg 2x, 
                    img-url/width-size.jpg 3x, 
                    img-url/width-size.jpg 4x'
            >

    Responsive sizes
        Can tell the browser how wide the image is. 480w = 480px, 960w = 960px
        Assumes you need 100% of the viewport width 

            <img src='image-to-load' 
                 alt='text-when-not-seen' 
                 width='' height=''
                 srcset='img-url/width-size.jpg 480w, 
                         img-url/width-size.jpg 960w, 
                         img-url/width-size.jpg 1440w'
            >

        If the image is part of the layout and doesn't need the 100vw:
            The `sizes` attribute lists what size image to use at which media query. 
            The `srcset` attribute allows you to specify multiple files to be used based on either viewport width or image pixel width. 

                <img src='image-to-load' 
                    alt='text-when-not-seen' 
                    width='' height=''
                    srcset='img-url/width-size.jpg 480w, 
                            img-url/width-size.jpg 960w, 
                            img-url/width-size.jpg 1440w'
                    sizes='(max-width: 480px) 240px,
                            (max-width: 960px) 480px,
                            (max-width: 1440px) 960px,
                            1920px'
                >

    Responsive pictures 
        <img> element is still needed but is wrapped in a <picture>
        Use the <source> element to provide multiple options 

            <picture> 
                <source media='(min-width:600px)'
                        srcset='computer-option'>
                <source srcset='mobile-option'>
                <img src='image-to-load' 
                    alt='text-when-not-seen' 
                    width='' height=''
                >
            </picture>

Figure and Figcaption 
    <figure> is for anything that appears as a figure, illustrating something 
    <figcaption> is for demonstration of a concept which needs a caption 

        <figure>
            <img src='image-to-load' alt='text-when-not-seen' width='' height=''>

            <figcaption>Write your caption here.</figcaption>
        </figure>

Audio 
    <audio controls loop autoplay>
        <source src='audio.ogg' type='audio/ogg'>
        <source src='audio.mp3' type='audio/mpeg'>
        Sorry your browser doesn't support this audio.      <!-- Fallback text -->
    </audio>

    controls: tells the HTML to show it's default audio control bar 
    loop: tells the auto to play again when it finishes
    autoplay: tells the file to play immediately when the page is landed on. Most people don't like this.
    <source>: allows you to list different audio files to be used by different supporting browsers. The browser will use the first file format that it understands
        mp3: supported in most browsers 
        ogg: was used but never caught momentum 
    The fallback text will be displayed if the browser cannot play any of the audio files. 

Video
    <video controls>
        <source src='video.480p.vp9.webm' type='video/webm'>
        <source src='video.480p.h264.mp4' type='video/mp4'>

        <p>This would be a video of ____, if your device supported playing this video</p>
    </video>

    The H.264 codec currently has the widest support across browsers. 
        Widely used - Not open source - Fees to use 
    AV1 is a free alternative

    Adaptive Bitrate Streaming allows a browser to constantly switch between resolutions while a video is playing. 

Captions annd subtitles
    WebVTT is the tech used for captions.
    Captions are saved in another file with time-coding so they know when to be displayed. 

    <video controls>
        <source src='video.480p.vp9.webm' type='video/webm'>
        <source src='video.480p.h264.mp4' type='video/mp4'>

        <track src='english-subtitles.vtt'          <!-- Names the track file -->
                        kind='caption'              <!-- Tells the browser this is a caption -->
                        label='english'             <!-- Shows up as a label for this choice -->
                        srclang='en'                <!-- Specifies the language -->
                        default>                    <!-- Specifies the default file when caption on -->

        <track src='english-subtitles.vtt'          <!-- Spanish subtitles -->
                        kind='subtitles'
                        label='espanol'
                        srclang='es'>

        <track src='description.en.vtt'     <!-- Descriptive file, tells what's happening on screen -->
                        kind='descriptions'
                        label='descriptions'
                        srclang='en'>

        <track src='chapters.vtt'       <!-- List chapters of the video, users can jump to chapters -->
                        kind='chapter'>

        <p>This would be a video of ____, if your device supported playing this video</p>
    </video>

<iframes> to embed media 
    It's common to embedd something complex from a services that specializes in doing that thing
    Usually the code is found with an Embed option from the service 

    CMS's don't usually let you just embed code from a website.
    Security is very important with <iframe>

Supporting languages
    You want computers to know which language your site is in.
    Also used for scripting, spelling and dictionary.
    If you have more than one language on a site, you need to specify the language for each section.
    The `lang` attribute is a universal attribute and can be place on any element.

        <p lang='es-mx'> Text text text <span lang='nah'> text text text.</span></p>

    <html lang='en-US'>
        ...
    </html>

    Options include:
        lang='en-US'    <!-- American English -->
        lang='en-GB'    <!-- UK English -->
        lang='es-MX'    <!-- Mexican Spanish -->
        lang='ar'       <!-- Arabic -->

Language Direction 
    Specifies if words are written left-to-right or right-to-left 
    Can be defined once on the outter HTML or can be defined for different sections

        <html lang='en-gb' dir='ltr'>
        <html lang='ar' dir='rtl'>

`charset` Attribute
    Defines the alphabet or set of characters for the script (alphabet) language
    ASCII - an encoding standard limited to 128 characters, focused on the needs of certain European languages
    Unicode - A universal encoding standard for characters encompassing many languages 
        Usually, `utf-8` is used. 
        Has over 137,000 characters.

    <meta charset='utf-8'>
        This is included on every page of the site, in the <head> </head> element. 

Generic elements
    These are simply placeholders used to point CSS or JS at them 
    Can take all of the global attributes. 
        class
        id
        lang
        aria roles 
    Use these as a last resort when there are no other elements to do the job.

    <div>
        Block-level element
        Used to group things into a visual format

    <span>
        Inline element  
        Used to change something inline, such as a language 

The HTML page 
    The <!doctype html> Declaration
        Declares which era this HTML file is from 

    <html> Tags
        Declares that all of the stuff in between is html. 
        Put an opening one at the top and a closing one at the bottom. 
        Everything else goes in bewteen. 

        The <head> element 
            Contains information the browser needs to know, through it won't be displayed on the page 

        The <body> element
            Contains the information and content that will be displayed on the page 

        The <meta> element
            Only used inside the head
            Conveys metadata about the page 
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <meta name="description" content="">
                <meta name="keywords" content="">
                <meta name="author" content="Luther Calvin Riggs">
                <title>Title</title>

                <!-- Tiles need transparent background -->
                <meta name="msapplication-TileImage" content="images/tiles/name-tile-70x70.png">    
                <meta name="msapplication-TileImage" content="images/tiles/name-tile-150x150.png">    
                <meta name="msapplication-TileImage" content="images/tiles/name-tile-310x150.png">    
                <meta name="msapplication-TileImage" content="images/tiles/name-tile-310-310.png">    
                <meta name="msapplication-TileColor" content="#000000">     <!-- Only hex format -->
                <meta name="application-name" content="">   <!-- Name when saved to home screen -->                

                    Character Set 
                    Viewport: without <meta name='viewport' .....> the browser things it is a desktop website that needs to be shrunk down to fit a phone screen 
                    Description: will show up in search engine results 
                    The following are used to create the card that is displayed when a webpage is posted to #Slack, LinkedIn or Twitter
                        Application-name: used to give a name when site is saved to a homescreen.
                        MSApplication-TileImage: 
                        Theme-Color: 


        The <title> element 
            The title of the webpage as used by the broswer 
            Shows up as the name on a browser tag, as a bookmark title when bookmarked, or the name of the page when seen on a list of sites in a Google search 

        The <link> element 
            Used to link to external files that you would like to load: CSS, fonts, favicons, JS, etc 
            
            The `rel` attribute tells the browser which kind of asset it is 
            The `href` attribute provides the URL to the asset 

        The <script> element 
            This is the last element that goes into the document's <head>
            Tells the browser to load a JavaScript file 

            The <script> tag can also be added at the end of an HTML document so that everything loads before the JS script
            
    <body> tags 
        This is where the content that you want displayed is listed. 
        There are 6 primary tags used in the <body>

        The <main> element 
            Wraps around the main content of the page. 
            Only used once per webpage and tells the browser, this is where the main content is. 

        The <header> element 
            Used to mark places on the page where the content is a header. 
                Commonly holds a logo, site name or navigation. 

        The <footer> element 
            Used to mark places on the page where the content is a footer. 
                Commonly holds a list of links, copyright info, extra company info, social media links.
                Conveys that the site has a few extra things to say about something.   
            Footers don't need to be at the bottom. They can go right under the title of an <article> and provide the name of the author publication date, and social sharing links (ie, news articles).

        The <article> element 
            Wrapped around any instance of an article.
            Simply conveys that an item is a stand-alone piece of content. 
                Might be a long blog post, a short snippet, a teaser card, or a social media post/tweet.

        The <section> element 
            Wraps around sections of content. 
            Usually each section has a new headline marking the name of that new section. 
                If a long essay is broken up into chunks, you can use this tag to make the sections. 
                Can be used to mark zones on a website. 

        The <aside> element 
            Marks content that is off to the side or not the main attraction.
                Could be an inset panel that goes with a main article and give additional info. 
                Could be advertisements. 

    Example:
    
            <!doctype html>
            <html lang='en-US' dir='ltr'>
                <head>
                    <!-- The browser will load files in the order listed -->
                    <meta charset='utf-8'>
                    <meta name='viewport' content='width=devide-width, initial-scale=1'>
                    <meta name='description' content='Description to show up in search results.'>
                    <meta name='application-name' content='Name of app when saved to homescreen.'>
                    <meta name='msapplication-TileImage' content='/images/tile-image.png'>
                    <meta name='theme-color' content='#000000'>

                    <link rel='manifest' href='/webappmanifest.json'>
                    <link href=/styles/reset.css' rel='stylesheet'>
                    <link href=/styles/main.css' rel='stylesheet'>
                    <link rel='icon' href='favicon.ico'>
                    <link rel='preload' href='myFont.woff2' as='font' type='font/woff2' crossorigin='anonymous'>

                    <title>Title of Website</title>

                    <script src='my-javascript-file.js'></script> 
                </head>
                <body>
                    ...
                </body>
            </html>

        The 'right way' of doing this depends on the content of the page. If you're not sure how to markup a page, find a page already on the web and see how they did theirs.

Form basics
    
    Used to get things done: logins, searches, passwords, etc.

        * Don't use "get" method. Very insecure. 

        `name=''` allows the browser to understand what data is being submitted (think column heading)
        
        `for=''` on the <label> links with the `id=''` on the <input>
                You could also wrap the <label> around the entire <input>
                Once this is done, you should be able to click on the <label> name on the browser and the cursor will jump to the input box

        `type=''` specifies what is allowed to be submitted in an <input>. This allows the browser to double check the email and asks user to fix if it's not. The default is 'text'. Other options include:
            'email'
            'submit' (for <button>)
            'password'
            'search'
            'tel'
            'date' - accepts a date and provides a calendar to do so
            'color' - provides a color picker to select a color 
            'file' - attributes `accept=''` will limit what types of files can be submitted. You can add the keyword 'multiple' to the <input> element to accept multiple files. 
            'checkbox' - include the attribute 'checked' on one of the inputs if you want to browser to load with that option already checked. The checkbox needs a `value=''` so that it can pass a long a value when it is checked. 

                <fieldset> is used to set up a list of options for a 'checkbox' or 'radio' button. The field set should also have a <legend> to explain what the group of opetions is for. 

            'radio' - similar to 'checkbox'
                 

        Adding 'required' to an <input> element will make the broswer insist that a field is filled before submitting.  

        `placeholder=''` puts a placeholder into the <input> so that the user can see a suggested input. Placeholders will disappear when the user clicks on or enters text into the field. The user doesn't have to delete it.

        `value=''` puts pre-written text into the <input> field. The difference between `value` and `placeholder` is that the user will have to delete the `value` text because it is real text. `value` is used when you want to autofill a form with what you think will be the write answers for a user (name, address, shipping info, credit card info).

        <textarea> allows you to collect a block of written text. You can put a size on the <textarea> using the `cols=''` and `rows=''` attributes but you don't have to. 





    <form action='success.html' method='get'>
        <label for='name'>Name</label>
        <input id='name' name='name' type='text'>

        <label for='email'>Email</label>
        <input id='email' name='email' 
               type='email' required 
               placeholder='email@example.com'>

        <label for='password'>Password</label>
        <input id='password' name='password' type='password'>

        <label for='search'>Search</label>
        <input id='search' name='search' type='search' placeholder='&#1234567>

        <label for='phone'>Phone Number</label>
        <input id='phone' name='phone' type='tele'>

        <label for='textarea'>Phone Number</label>
        <textarea id='textarea' name='textarea' cols='30' rows='15'</textarea>

        <label for='date'>Date</label>
        <input id='date' name='date' type='date'>

        <label for='color'>Color</label>
        <input id='color' name='color' type='color'>

        <label for='file'>File</label>
        <input id='file' name='file' type='file'
               accept='image/*' multiple>

        <fieldset>
            <legend>Checkboxes in a fieldset</legend>
            
            <input id='thischeck' name='checkboxlist' 
                    type='checkbox' value='This' checked>
            <label for='thischeck'>This</label>

            <input id='orcheck' name='checkboxlist' 
                    type='checkbox' value='And Or'>
            <label for='orcheck'>And/Or</label>

            <input id='thatcheck' name='checkboxlist' 
                    type='checkbox' value='That'>
            <label for='thatcheck'>That</label>
        
        </fieldset>

        <fieldset>
            <legend>Radio buttons in a fieldset</legend>
            
            <input id='thisradio' name='radiobutton' 
                    type='radio' value='This' checked>
            <label for='thischeck'>This</label>

            <input id='orradio' name='radiobutton' 
                    type='radio' value='And Or'>
            <label for='orcheck'>And/Or</label>

            <input id='thatradio' name='radiobutton' 
                    type='radio' value='That'>
            <label for='thatcheck'>That</label>
        
        </fieldset>

        <button type='submit'>Sign up</button>

    </form>


HTML Table

    Used for tabular data. Like a research project. Use anytime you might use an excel sheet in a word document. 

    As long as there is a symantic reason to use a table. 

    Element_________        Name_________           Purpose______                   Attributes_______
    <table></table>         Table                   Wraps the whole table

    <tr></tr>               TR = table row          Wraps around a set of           colspan, rowspan,
                                                    elements, defining them as      headers
                                                    belonging to the same row

    <th></th>               TH = table header       Defines a header for a          colspan, rowspan,
                                                    column                          scope

    <td></td>               TD = table data         Marks the actual bits 
                                                    of data 


    <table class='styled'>      <!-- the class will link to a stylesheet for custom styling -->
        <tr>
            <th>Bird</th>
            <th>Color</th>
            <th>Diet</th>
            <th>Image</th>
        </tr>
        
        <tr>
            <td>American Goldfinch</td>
            <td>yellow</td>
            <td>Mostly seeds.</td>
            <td><img src='.jpg' alt='american-goldfinch' width='360' height='261'></td>
        </tr>

        <tr>
            <td>Bluejay</td>
            <td>blue</td>
            <td>Omnivorous.</td>
            <td><img src='.jpg' alt='bluejay' width='360' height='261'></td>
        </tr>

        <tr>
            <td>Indigo Bunting</td>
            <td>blue</td>
            <td>Mostly seeds and insects.</td>
            <td><img src='.jpg' alt='indigo-bunting' width='360' height='261'></td>
        </tr>

        <tr>
            <td>Northern Cardinal</td>
            <td>red</td>
            <td>Seeds, insects, berries.</td>
            <td><img src='.jpg' alt='northern-cardinal' width='360' height='261'></td>
        </tr>

        <tr>
            <td>Tufted Titmouse</td>
            <td>grey</td>
            <td>Mostly insects.</td>
            <td><img src='.jpg' alt='tufted titmouse' width='360' height='261'></td>
        </tr>

    </table>

    Tables can also have content span multiple rows or multiple columns. You can define a header, body or footer for the table. You can also add a caption. 
    
     