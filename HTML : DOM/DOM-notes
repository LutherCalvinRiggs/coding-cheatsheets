
                                     ***  The Odin Project Notes  ***

The DOM ( or Document Object Model) is a tree-like representation of the contents of a webpage - a tree of "nodes" with different relationships depending on how they're arrannged in the HTML document 

        <div id="container">
            <div class="display"></div>
            <div class="controls"></div>
        </div>

    In the above example, the `<div class='display'></div>` is a child of `<div id='container'></div>` and a sibling to `<div class='controls'></div>`. Think of it like a family tree. `<div id='container'></div>` is a parent, with its children on the next level, each on their own "branch".

Targeting Nodes with Selectors

    "Selectors" target the nodes you want to work with. You can use a combination of CSS-style selectors and relationship properties to target the nodes you want. 

    - CSS-style Selectors

        Using the above example, the following selectors will refer to `<div class='display'></div>`

            div.display
            .display 
            #container > .display 
            div#container > div.display 

        You can also use relational selectors (i.e., `firstElementChild` or `lastElementChild` etc.) with special properties owned by the nodes. 

            const container = document.querySelector('#container');
            // select the #container div 

            console.dir(container.firstElementChild);                      
            // select the first child of #container => .display

            const controls = document.querySelector('.controls');   
            // select the .controls div

            console.dir(controls.previousElementSibling);                  
            // selects the prior sibling => .display

        You're identifying a certain node based on its relationships to the nodes around it.

    - The 'root' or <html> tag can be reached with the `document.documentElement` property

    - Elemets can usually be found or inserted more efficiently in a tree than in a flat array. 

    - Application nodes may have children, whereas identifies and values are 'leaves', or nodes without children.

    - Nodes for elements, which represent HTML tags, detereine the structure of the document. 

    - Each DOM node object has a `nodeType` property, which contains a code (number) that identifies the type of node. Elements have code 1, which is also defined as the constant property Node.ELEMENT_NODE. Text nodes, representing a section of text in the document, get code 3 (Node.TEXT_NODE). comments have code 8 (Node.COMMENT_NODE). 

    - Every node has a `parentNode` property that points to the node it is part of, if any. Likewise, every element node (node type 1) has a `childNode` property that points to an array-like object hodling its children. 

DOM Methods 

    When your HTML code is parsed by a web browser, it is converted to the DOM as was mentioned above. One of the primary differences is that these nodes are objects that have many properties and methods attached to them. These properties and methods are the primary tools we are going to use to manipulate our webpage with JavaScript.

    - Query Selectors can be used to target nodes

        // Return reference to the first match of `selector`
        element.querySelector(selector);

        // Return a "nodelist" containing references to all of the matches of the `selectors`
        element.querySelectorAll(selectors)

    * When using querySelectorAll, the return value is not an array. It looks like an array, and it somewhat acts like an array, but it's really a "nodelist". The big distinction is that several array methods are missing from nodelists. One solution, if problems arise, is to convert the nodelist into an array. To do this, use `arrayName.from()` or the spread operator (...).

    - Element Creation 

        // Create a new element of tag type tagName. 
        const div = document.createElement('div');
            // `[options]` in this case means you can add some optional parameters to the function. 

        This funnction does NOT put your new element into the DOM, it simply creates it in memory. This is so that you can nmanipulate the element( by adding styles, classes, ides, text, etc) before placing it on the page. You can place the element into the DOM with one of the following methods.

    - Append Elements 

        // Appends `childNode` as the last child of `parentNode`
        parentNode.appendChild(childNode);

        // Inserts `newNode` into `parentNode` before `referenceNode`
        parentNode.insertBefore(newNode, referenceNode);

    - Removing Elements 

        // Removes `child` from `parentNode` on the DOM and returns reference to `child`
        parentNode.removeChild(child);

    - Altering Elements 

        When you have a reference to an element, you can use that reference to alter the element's own properties. This allows you to do many useful alterations, like adding/removing and altering attributes, changing classes, adding inline style information and more. 

            const div = document.createElement('div');                     
            // create a new div referenced in the variable 'div'

    - Adding Inline Style 

            div.style.color = 'blue';                                      
            // adds the indicated style rule

            div.style.cssText = 'color: blue; background: white';          
            // adds several style rules

            div.setAttribute('style', 'color: blue; background: white');    
            // adds several style rules

        Getting, setting, & removing individual inline CSS properties 

                let divStyle = document.querySelector('div').style;
                
                //set
                divStyle.backgroundColor = 'red';
                divStyle.border = '1px solid black';
                divStyle.width = '100px';
                divStyle.height = '100px';

                //get
                console.log(divStyle.backgroundColor);
                console.log(divStyle.border);
                console.log(divStyle.width);
                console.log(divStyle.height);

                //remove
                divStyle.backgroundColor = '';
                divStyle.border = '';
                divStyle.width = '';
                divStyle.height = '';

            * The property names contained in the style object do not contain the normal hyphen that is used in CSS property names. The translation is pretty simple. Remove the hyphen and use camel case. (e.g. `font-size` = `fontSize` or `background-image` = `backgroundImage`). In the case where a css property name is a JavaScript keyword the javascript css property name is prefixed with "css" (e.g. `float` = `cssFloat`).

            * Short hand properties are available as properties as well. So you can not only set `margin`, but also `marginTop`.

            * Remember to include for any css property value that requires a unit of measure the appropriate unit  (e.g. `style.width = '300px';` not style.width = '300';). When a document is rendered in standards mode the unit of measure is require or it will be ignored. In quirksmode assumptions are made if not unit of measure is included.

            For a full list of css properties: http://domenlightenment.com/#6.2

            The style object is a `CSSStyleDeclaration` object and it provides not only access to individual CSS properties, but also the `setPropertyValue(propertyName)`, `getPropertyValue(propertyName, value)`, and `removeProperty()` methods used to manipulate individual CSS properties on an element node. In the code below we set, get and remove individual CSS properties on a `<div>` using these methods. 

                <div style="background-color:green;border:1px solid purple;"></div>

                var divStyle = document.querySelector('div').style;

                // set
                divStyle.setProperty('background-color','red');
                divStyle.setProperty('border','1px solid black');
                divStyle.setProperty('width','100px');
                divStyle.setProperty('height','100px');

                // get
                console.log(divStyle.getPropertyValue('background-color'));
                console.log(divStyle.getPropertyValue('border','1px solid black'));
                console.log(divStyle.getPropertyValue('width','100px'));
                console.log(divStyle.getPropertyValue('height','100px'));

                // remove
                divStyle.removeProperty('background-color');
                divStyle.removeProperty('border');
                divStyle.removeProperty('width');
                divStyle.removeProperty('height');
    
            * Take notice that the property name is passed to the `setProperty()` and `getPropertyValue()` method using the css property name including a hyphen (e.g. `background-color` not `backgroundColor`).

            * For more detailed information about the `setProperty()`, `getPropertyValue()`, and `removeProperty()` as well as additional properties and methods have a look the documentation provided by Mozilla: https://developer.mozilla.org/en/DOM/CSSStyleDeclaration

        As just mentioned, if you're accessing a kebab-cased css rule from JS, you'll either need to use camelCase or you'll need to use a bracket notation instead of dot notation.

            div.style.background-color // doesn't work - attempts to subtract color from div.style.background
            div.style.backgroundColor // accesses the divs background-color style
            div.style['background-color'] // also works
            div.style.cssText = "background-color: white" // ok in a string

    - Editing Attributes 

            div.setAttribute('id', 'theDiv');                              
            // if id exists update it to 'theDiv' else create an id
            // with value "theDiv"

            div.getAttribute('id');                                        
            // returns value of specified attribute, in this case
            // "theDiv"

            div.removeAttribute('id');                                     
            // removes specified attribute

        Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want. 

        - Content vs IDL Attributes 

            In HTML, most attributes have two faces: the content attribute and the IDL (Interface Definnition Language) attribute. 

            The content attribute is the attribute as you set it from the content (the HTML code) and you can set it or get it via `element.setAttribute()` or `element.getAttribute()`. The content attribute is always a string even when the expected value should be an integer. For example, to set an `<input>` element's `maxlength` to 42 using the content attribute, you have to call `setAttribute("maslength", "42")` on that element. 

            The IDL attribute is also known as a JS property, These are the attributes you can read or set using JS properties like `element.foo`. The IDL attribute is always going to use (but might transfrom) the underlying content attribute to return a value when you get it and is going to save something in the content attribute when you set it. In other words, the IDL attributes, in essence, reflect the content attributes. 

            Most of the time, IDL attributes will return their values as they are really used. FOr example, the default `type` for `<input>` elements is "text", so if you set `input.type="foobar"`, the `<input>` element will be of type text (in the appearance and the behavior) but the "type" content attribute's value will be "foobar". However, the `type` IDL attribute will return the string "text". 

            IDL attributes are not always strings; for example, `input.maxlength` is a nnumber (a signed long). When using IDL attributes, you read or set values of the desired type, so `input.maxlength` is always going to return a number and when you set `input.maxlength`, it wants a number. If you pass another type, it is automatically converted to a number as specified by the standard JS rules for type conversion. 

            IDL attributes can reflect other types such as unsigned long, URLs, booleans, etc. Unfortunately, there are no clear rules and the way IDL attributes behave in conjunction with their corresponding content attributes depends on the attribute. Most of the time, it will follow the rules laid out in the specification, but sometimes it doesn't. HTML specifications try to make this as developer-friendly as possible, but for various reasons (mostly historical), some attributes behave oddly (`select.size`, for example) and you should read the specifications to understand how exactly they behave.

        - Boolean Attributes 

            Some content attributes (eg, `required`, `readonly`, `disabled`) are called boolean attributes. If a boolean attribute is present, its value is true, and if it's absent, its value is false. 

            HTML5 defines restrictions on the allowed values of boolean attributes: If the attribute is present, its value must either be the empty string (equivalently, the attribute may have an unassigned value), or a value that is an ASCII case-insenitive match for the attribute's canonical name, with no leading or trailing whitespace. The following examples are valid ways to mark up a boolean attribute: 

                <div itemscope> This is valid HTML but invalid XML. </div>
                <div itemscope=itemscope> This is also valid HTML but invalid XML. </div>
                <div itemscope=""> This is valid HTML and also valid XML. </div>
                <div itemscope="itemscope"> This is also valid HTML and XML, but perhaps a bit verbose. </div>

            To be clear, the values `true` and `false` are not allowed on boolean attributes. To represent a false value, the attribute has to be omitted altogether. This restriction clears up some common misunderstandings: With `check="false"` for example, the element's `checked` attribute would be interpreted as true because the attribute is present. 

    - Working with Classes

            div.classList.add('new');                                      
            // adds class "new" to your new div

            div.classList.remove('new');                                   
            // remove "new" class from div

            div.classList.toggle('active');                                
            // if div doesn't have class "active" then add it, or if it does, then remove it

        It is often stanndard (and more clean) to toggle a CSS style rather than adding and removing incline CSS. 

    - Adding text content 

        div.textContent = 'Hello World!'                               
        // creates a text node containing "Hello World!" and inserts it in div

    - Adding HTML content 

        div.innerHTML = '<span>Hello World!</span>';                   
        // renders the html inside div

        * Note that textContent is prefereable for adding text, and innerHTML should be used sparingly as it can create security risks if misused.

    - Application 

            <!-- your html file: -->
            <body>
            <h1>
                THE TITLE OF YOUR WEBPAGE
            </h1>
            <div id="container"></div>
            </body>

            // your javascript file
            const container = document.querySelector('#container');

            const content = document.createElement('div');
            content.classList.add('content');
            content.textContent = 'This is the glorious text-content!';

            container.appendChild(content);

        In the above JS file, first we get a reference to the `container` div that already exists in our HTML. THen we create a new div and store it in the variable `content`. We add a class and some text to the `content` div and finally append that div to `container`. 

        After the JS code is run, our DOM tree will look like this: 

            <!-- The DOM tree after the JS is run -->
            <body>
            <h1>
                THE TITLE OF YOUR WEBPAGE
            </h1>
            <div id="container">
                <div class="content">
                This is the glorious text-content!
                </div>
            </div>
            </body>

        Keep in mind that the JS does NOT alter your HTML, but the DOM - your HTML file will look the same, but the JS changes what the browser renders.

        * Your JS, for the most part, is run whenever the JS file is run, or when the script tag is encountered in the HTML. If you are including your JavaScript at the top of your file, many of these DOM manipulation nmethods will not work becaues the JS code is being run BEFORE the nodes are created in the DOM. The simplest way to fix this is to include your JS at the bottom of your HTML file so that it gets run after the DOM nodes are arsed and created.

DOM Events

    Events are actiosn that occur on your webpage such as mouse-clicks or keypresses. 

    There are 3 primary ways to go about this. Below we create 3 buttons that all alert "BUTTON" when clicked:

        1) You can attach functions attributes directly on your HTML elements
        
                <!-- the html file -->
                <button onclick="alert('Hello World')">Click Me</button>
            
            The above solution is less than ideal because we're cluttering our HTML with JavaScript. Also, we can nonly have 1 'onclick' event per element.

        2) You can set the 'on_event_' property on the DOM object in your JS

                <!-- the html file -->
                <button id="btn">Click Me</button>

                // the JavaScript file
                const btn = document.querySelector('#btn');
                btn.onclick = () => alert("Hello World");

            This is a little better. We've moved the JS out of the HTML and into a JS file, but we still have the problem that a DOM element can only have 1 'onclick' property. 

                To review arrow functions: http://javascript.info/arrow-functions-basics

        3) You can attach event listeners to the nodes in your JS 

                <!-- the html file -->
                <button id="btn">Click Me Too</button>

                // the JavaScript file
                const btn = document.querySelector('#btn');
                btn.addEventListener('click', () => {
                    alert("Hello World");
                });

            Now, we maintain separation of concers, AND we also allow multiple event listeners if the need arises. Method 3 is much more flexible and powerful, though it is a bit more complex.

    Event listeners are definitely the preferred method, but you will refularly see the others in use.

    All 3 of the same methods can also be named functions like below: 

        <!-- METHOD 1 -->
        <button onclick="alertFunction()">CLICK ME BABY</button>

        function alertFunction() {
            alert("YAY! YOU DID IT!");
        }

        // METHOD 2
        btn.onclick = alertFunction;                            // Note no ()

        // METHOD 3
        btn.addEventListener('click', alertFunction);           // Note no ()

    Using named functions can clean up your code considerably, and is a really good idea if the function is something that you are going to want to do in multiple places. 

    With all three methods we can access more information about the event by passing a parameter to the function that we are calling:

        btn.addEventListener('click', function (e) {
            console.log(e); 
        });                                                     // Note closing });

    The `e` in the function above is an object that references the event itself. Within that object you have access to many useful properties and functions such as which mouse button or key was pressed, of information about the event's target - the DOM node that was clicked. 

            // returns the HTML code that the Event Listener target
            btn.addEventListener('click', function (e) {
                console.log(e.target);
            });

            // changes a style attribute of the Event Listener target
            btn.addEventListener('click', function (e) {
                e.target.style.background = 'blue';
            });

    - Attaching Listeners to a Group of Nodes 

        It might seem like a lot of code if you're attaching lots of similar event listeneres to many elements. There's a few ways to go about doing that more efficitently. We learned above that we can get a nodelist of all of the items matching a specific selector with `querySelectorAll('selector')`. In order to add a listener to each of them we simply need to itereate through the whole list like so:

            <!-- HTML code -->
            <div id="container">
                <button id="1">Click Me</button>
                <button id="2">Click Me</button>
                <button id="3">Click Me</button>
            </div>

            // JS code 
            // buttons is a node list. It looks and acts much like an array.
            const buttons = document.querySelectorAll('button');

            // we use the .forEach method to iterate through each button
            buttons.forEach((button) => {

            // and for each one we add a 'click' listener
            button.addEventListener('click', () => {
                alert(button.id);
            });
            });


        This is just the tip of the iceberg when it comes to DOM manipulation and event handling. 

        There are more useful event that can be used:

            click 
            dbclick 
            keypress
            keydown 
            keyup 

        You can find a more complete list of event here: https://www.w3schools.com/jsref/dom_obj_event.asp

    




https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction

    - Because the vast majority of code that uses the DOM revolves around manipulating HTML documents, it's common to refer to the noeds in the DOM as elements, although strictly speaking not every node is an element.

/* DOM Fundamental data types */
    Document 
        When a member returns an object of type `document` (eg the `ownerDocument` property of an element returns the `document` to which it belongs), this object is the root `document` itself.
    
    Node 
        Every object located within a document is a node of some kind. In an HTML document, an object can be an element node but also a text node or attribute node. 

    Element 
        The `element` type is based on `node`. It refers to an element or a node of type `element` returned by a member of the DOM API. Rather than saying, for example, that the `document.createElement()` method returns an object reference to a `node`, we just say that this method returns the `element` that has just been created in the DOM. `element` objects implement the DOM `Element` interface and also the more base `Node` interface, both of which are included together in this reference. In an HTML document, elements are further enhanced by the HTML DOM API's `HTMLElement` interface as well as other interfaces describing capabilities of specific kinds of elements (for instance, `HTMLTableElement` for <table> elements).

    NodeList 
        A `nodeList` is an array of elements, like the kind that is returned by the method document.getElementsByTagName(). Items in a `nodeList` are accessed by index in either of two ways:
            list.item(1)
            list[1]
        These two are equivalent. In the first, `item()` is the single method on the `nodeList` object. The latter uses the typical array syntax to fetch the second item on the list.

    Attribute 
        When an `attribute` is returned by a member (eg by the `createAttribute()` method), it is an object reference that exposes a special (albeit small) interface for attributes. Attributes are nodes in the DOM just like elements are, though you may rarely use them as much.

    NamedNodeMap
        A `namedNodeMap` is like an array, but the items are accessed by name or index, though this latter case is merely a convenience for enumeration, as they are in no particular order in the list. A `namedNodeMap` has an `item()` method for this purpose, and you can also add a remove items from a `namedNodeMap`. 

    - It is common to refer to any `Attribute` node as simply an `attribute`, for example, and to refer to an array of DOM nodes as a `nodeList`. 

/* DOM interfaces */
    This section is about the objects and the actual things you can use to manipulate the DOM hierarchy. There are many points where understanding how these work can be confusing For example, the object representing the HTML `form` element gets its `name` property from the `HTMLFormElement` interface but its `className` property from the `HTMLElement` interface. In both cases, the property you want is simply in that form object.

    - Interfaces and Objects 
        Many objects borrow from several different interfaces. The table object, for example, implements a specialized `HTMLTableElement` interface, which includes such methods as `createCaption` and `insertRow`. But since it's also an HTML element, `table` implements the `Element` interface described in the DOM `Element` Reference chapter. And finally, since an HTML element is also, as far as the COM is concerned, a node in the tree of nodes that make up the object model for an HTML or SML page, the table object also implements the more basic `Node` interface, from which `Element` derives.

        When you get a reference to a `table` object, as in the following example, you routinely use all three of these interfaces interchangeably on the object, perhaps without knowing it.
            
            const table = document.GetElementById("table");
            const table Attrs = table.attributes;               // Noce/Element interface 
            for (let i = 0; i < tableAttrs.lentgh; i++) {
                // HTMLTableElement interface: border attribute 
                if(tableAttrs[i].nodeName.toLowerCase() == "border")
                    table.border = "1";
            }
            // HTMLTableElement interface: summary attribute
            table.summary = "note: increased border";

    - Core Interfaces in the DOM 
        This section lists some of the most commonly-used interfaces in the DOM. The idea is not to describe what these APIs do here but to give you an idea of the sorts of methods and properties you will see very often as you use the DOM. 

        The `document` and `window` objects are the objects whose interfaces you generally use most often in DOM programming. In simple terms, the `window` object represents something like the browser, and the `document` object is the root of the document itself. `Element` inherits from the generic `Node` interface, and together these two interfaces provide many of the methods and properties you use on individual elements. These elements may also have specific interfaces for dealing with the kind of data those elements hold, as in the `table` object example in the previous section. 

        The following is a brief list of common APIs in web and XML page scripting using the DOM.
            document.getElementByID(id)
            document.getElementsByTagName(name)
            document.createElement(name)
            parentNode.appendChild(node)
            element.innerHTML
            element.style.left
            element.setAttribute()
            element.getAttribute()
            element.addEventListener()
            window.content
            window.onload
            window.scrollTo()

/* DOM API */
    document.querySelector('<element>')
        
        Used to select an HTML element and store a reference to it in a constant. This allows us to maipulate it later on.

            const html = document.querySelector('html');
        
    document.createElement('<element>')

        Used to create an HTML element and store a reference to it in a constant. 

            const panel = document.createElement('div');

    <element>.setAttribute('class', 'class-name');
        
        Used to set a `class` attribute to the panel with a value of `msgBox`. This is to make it easier to style the element with pre-written CSS. 

            panel.setAttribute('class', 'msgBox');

    Node.appendChild('const');

        A DOM function used to nest one element inside the other as a child of it. 

        The 'const' is the variable name of the element that will be appended. 

        The `Node` is element that will become the parent. 

            html.appendChild(panel);

        * Without specifying where to up the newly created element, it won't appear on the page.

    Node.textContent

        Used to insert a message inside of an <element>

            msg.textContent = 'This is a message';

    GlobalEventHandlers.onclick

        The `onclick` handler is a property available on a button (or any element on the page) that can be set to a function to specify what code to run when the button is clicked.

        When calling a function with `onclick`, be sure to NOT include the parentheses (). If the parentheses are included, the function will be called immediately. 

    Node.removeChild()
    
        DOM API fucntion used to specify that we want to remove a specific child element of the HTML element.

/* Testing the DOM API */
    This provides samples for every interface that you can use in your own web development. In some cases, the samples are completely HTML pages, with the DOM access in a <script> element, the interface (eg buttons) necessary to fire up the script in a form, and the HTML elements upon wich the DOM operates listed as well. These samples can be copied and pasted to a new HTML document to run the example from the browser.

    There are some cases, however, when the examples are more concise. To run examples that only demonstrate the basic relationship of the interface to the HTML elements, you may want to set up a test page in which interfaces can be easily accessed from scripts. The following ver simple web page provides a <script> element in the header in which you can place functions that test the interface, a few HTML elements with attributes that you can retrieve, set, or otherwise manipulate, and the web user interface necessary to call those unctions from the browser.

    You can use this test page or create a similar one to test the DOM interfaces you are interested in and see how they work on the broswer platform. You can update the contents of the test() function as needed, create more buttons, or add elements as necessary.

        <html>
        <head>
            <title>Dom Tests</title>
            <script>
                function setBodyAttr(attr, value) {
                    if (document.body) document.body[attr] = value;
                    else throw new Error("no support");
                }
            </script>
        </head>
        <body>
            <div style="margin: .5in; height: 400px;">
                <p><b><tt>text</tt></b></p>
                <form>
                    <select onChange="setBodyAttr('text', this.options[this.selectedIndex].value);">
                        <option value="black">black</option>
                        <option value="red">red</option>
                    </select>
                    <p><b><tt>bgColor</tt></b></p>
                    <select onChange="setBodyAttr('bgColor',this.options[this.selectedIndex].value);">
                        <option value="white">white</option>
                        <option value="lightgrey">grey</option>
                    </select>
                    <p><b><tt>link</tt></b></p>
                    <select onChange="setBodyAttr('link',this.options[this.selectedIndex].value);">
                        <option value="blue">blue</option>
                        <option value="green">green</option>
                    </select>
                    <small>
                        <a href="http://some.website.tld/page.html" id="sample">
                            (sample link)
                        </a>
                    </small><br />
                        <input type="button" value="version" onclick="ver()" />
                </form>
            </div>
        </body>
        </html>

    To test a lot of interfaces in a singe page - for example, a "suite" of properties that affect the colors of a web page - you can create a similar test page with a whole console of buttons, textfields, and other HTML elements. 